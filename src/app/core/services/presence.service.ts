import { effect, inject, Injectable, signal } from '@angular/core';
import { environment } from '../../../environments/environment';
import { HubConnection, HubConnectionBuilder, HubConnectionState } from '@microsoft/signalr';
import { ToastrService } from 'ngx-toastr';
import { ResponseModel } from '../../shared/models/interfaces/response.model';
import { sign } from 'crypto';
import { BehaviorSubject } from 'rxjs';

export interface UnreadMessageUpdate {
  senderUsername: string;
  unreadCount: number;
  lastMessageSent: string | Date;
}

@Injectable({
  providedIn: 'root'
})
export class PresenceService {
  private hubUrl = environment.hubUrl;
  private hubConnection?: HubConnection;
  // üëá –î–æ–¥–∞—î–º–æ –∑–º—ñ–Ω–Ω—É –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É
  private connectedUserEmail: string | null = null;

  onlineUsers = signal<string[]>([]);

  public newUnreadMessage$ = new BehaviorSubject<UnreadMessageUpdate | null>(null);

  constructor() {
    // ‚úÖ –°—Ç–≤–æ—Ä—é—î–º–æ –µ—Ñ–µ–∫—Ç, —è–∫–∏–π –±—É–¥–µ –ø–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ —Å—Ç–∞—Ä–∏–π —ñ –Ω–æ–≤–∏–π —Å–ø–∏—Å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    effect((onCleanup) => {
      const currentUsers = this.onlineUsers();
      let previousUsers = new Set<string>();

      // –§—É–Ω–∫—Ü—ñ—è onCleanup –¥–æ–∑–≤–æ–ª—è—î –Ω–∞–º –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Å—Ç–∞–Ω—É
      onCleanup(() => {
        previousUsers = new Set(currentUsers);
      });

      // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–µ—Ä—à–∏–π –∑–∞–ø—É—Å–∫, –∫–æ–ª–∏ previousUsers –ø–æ—Ä–æ–∂–Ω—ñ–π
      if (previousUsers.size === 0) {
        return;
      }

      const currentUsersSet = new Set(currentUsers);

      // –í–∏–∑–Ω–∞—á–∞—î–º–æ, —Ö—Ç–æ –∑'—è–≤–∏–≤—Å—è –æ–Ω–ª–∞–π–Ω
      for (const user of currentUsers) {
        if (!previousUsers.has(user) && user !== this.connectedUserEmail) {
        //  this.toastr.info(`${user} is online`);
        }
      }

      // –í–∏–∑–Ω–∞—á–∞—î–º–æ, —Ö—Ç–æ –≤–∏–π—à–æ–≤
      for (const user of previousUsers) {
        if (!currentUsersSet.has(user)) {
        //  this.toastr.warning(`${user} is offline`);
        }
      }
    });
  }

  async createHubConnection(user: ResponseModel): Promise<void> {
    // ‚úÖ –ö–†–û–ö 1: –Ü–≥–Ω–æ—Ä—É—î–º–æ –≤–∏–∫–ª–∏–∫, —è–∫—â–æ –º–∏ –í–ñ–ï –ø—ñ–¥–∫–ª—é—á–µ–Ω—ñ –¥–ª—è —Ü—å–æ–≥–æ –∂ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if (this.hubConnection?.state === HubConnectionState.Connected && this.connectedUserEmail === user.user.email) {
      console.log('Presence service already connected for this user. Ignoring request.');
      return; // –í–∏—Ö–æ–¥–∏–º–æ –∑ —Ñ—É–Ω–∫—Ü—ñ—ó, –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–ª—è—á–∏
    }

    // –ó—É–ø–∏–Ω—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –∑'—î–¥–Ω–∞–Ω–Ω—è, —è–∫—â–æ –≤–æ–Ω–æ –±—É–ª–æ –¥–ª—è —ñ–Ω—à–æ–≥–æ —é–∑–µ—Ä–∞ –∞–±–æ –≤ —ñ–Ω—à–æ–º—É —Å—Ç–∞–Ω—ñ
    if (this.hubConnection) {
      await this.hubConnection.stop().catch(error => console.error('Error stopping previous connection:', error));
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ –∑'—î–¥–Ω–∞–Ω–Ω—è
    this.hubConnection = new HubConnectionBuilder()
      .withUrl(this.hubUrl + 'presence', { accessTokenFactory: () => user.token })
      .withAutomaticReconnect()
      .build();

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å–ª—É—Ö–∞—á—ñ –ø–æ–¥—ñ–π
    this.hubConnection.on('UserIsOnline', (username: string) => {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—Ç–æ—á–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —î –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–æ–º
      if (user.user.email !== username) {
        //this.toastr.info(`${username} is online`);
      }
    });

    this.hubConnection.on('UserIsOffline', (username: string) => {
      // ‚úÖ –î–û–î–ê–ù–û: –¢–∞–∫–∞ –∂ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è –æ—Ñ–ª–∞–π–Ω-–ø–æ–¥—ñ—ó
      if (user.user.email !== username) {
//this.toastr.warning(`${username} is offline`);
      }
    });

    this.hubConnection.on('GetOnlineUsers', (email: string[]) => {
      this.onlineUsers.set(email);
    });

    this.hubConnection.on('NewMessageReceived', (update: UnreadMessageUpdate) => {
      console.log('PresenceService received a new message notification:', update);
      // –ö–ª–∞–¥–µ–º–æ –æ—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ –≤ BehaviorSubject, —â–æ–± —ñ–Ω—à—ñ —Å–µ—Ä–≤—ñ—Å–∏ –º–æ–≥–ª–∏ —ó—Ö –æ—Ç—Ä–∏–º–∞—Ç–∏
      this.newUnreadMessage$.next(update);
    });

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –Ω–æ–≤–µ –∑'—î–¥–Ω–∞–Ω–Ω—è
    try {
      await this.hubConnection.start();
      // ‚úÖ –ö–†–û–ö 2: –ó–±–µ—Ä—ñ–≥–∞—î–º–æ email –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –¥–ª—è —è–∫–æ–≥–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
      this.connectedUserEmail = user.user.email;
    } catch (error) {
    //  this.toastr.error('Failed to connect to presence hub');
      console.error(error);
      this.connectedUserEmail = null; // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
    }
  }

  async stopHubConnection(): Promise<void> {
    if (this.hubConnection?.state === HubConnectionState.Connected) {
      await this.hubConnection.stop().catch(error => console.error('Error disconnecting from presence hub:', error));
    }
    // ‚úÖ –ö–†–û–ö 3: –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ
    this.connectedUserEmail = null;
  }
}